What Chunk 4 Does:
When an admin clicks ‚ÄúLink Google Account‚Äù, it redirects to Google's login screen

Upon success, the system saves the user‚Äôs access token, refresh token, and email

The user's account is marked as ‚Äúlinked‚Äù in the UI

Tokens are saved to user_tokens.json and matched to their user ID

üì¶ Replit Setup (Verify First):
Make sure these are saved in Replit Secrets:

cpp
Copy
Edit
GOOGLE_CLIENT_ID
GOOGLE_CLIENT_SECRET
GOOGLE_REDIRECT_URI  # e.g., https://your-replit-URL/oauth2callback
üß© CHUNK 4 ‚Äì Add OAuth Handler to Your Flask App
1. Add these imports to main.py or your Flask app file:
python
Copy
Edit
import os
import json
from flask import Flask, request, redirect, session, url_for
from google_auth_oauthlib.flow import Flow
from google.auth.transport.requests import Request
import google.oauth2.credentials
2. Add this route to start OAuth login:
python
Copy
Edit
@app.route('/authorize/<user_id>')
def authorize(user_id):
    session['user_id'] = user_id
    flow = Flow.from_client_config(
        {
            "web": {
                "client_id": os.environ['GOOGLE_CLIENT_ID'],
                "client_secret": os.environ['GOOGLE_CLIENT_SECRET'],
                "redirect_uris": [os.environ['GOOGLE_REDIRECT_URI']],
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token"
            }
        },
        scopes=["https://www.googleapis.com/auth/gmail.send", "https://www.googleapis.com/auth/gmail.readonly"],
        redirect_uri=os.environ['GOOGLE_REDIRECT_URI']
    )
    authorization_url, state = flow.authorization_url(
        access_type='offline',
        include_granted_scopes='true',
        prompt='consent'
    )
    session['state'] = state
    return redirect(authorization_url)
3. Add this route to handle the callback:
python
Copy
Edit
@app.route('/oauth2callback')
def oauth2callback():
    state = session['state']
    user_id = session['user_id']
    flow = Flow.from_client_config(
        {
            "web": {
                "client_id": os.environ['GOOGLE_CLIENT_ID'],
                "client_secret": os.environ['GOOGLE_CLIENT_SECRET'],
                "redirect_uris": [os.environ['GOOGLE_REDIRECT_URI']],
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token"
            }
        },
        scopes=["https://www.googleapis.com/auth/gmail.send", "https://www.googleapis.com/auth/gmail.readonly"],
        state=state,
        redirect_uri=os.environ['GOOGLE_REDIRECT_URI']
    )
    flow.fetch_token(authorization_response=request.url)

    credentials = flow.credentials
    token_data = {
        'access_token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }

    # Save tokens per user ID
    try:
        with open('user_tokens.json', 'r') as f:
            all_tokens = json.load(f)
    except:
        all_tokens = {}

    all_tokens[user_id] = token_data

    with open('user_tokens.json', 'w') as f:
        json.dump(all_tokens, f, indent=2)

    return redirect('/admin?linked=' + user_id)
4. Update Your Dashboard UI Template
In the HTML file for the admin user list, update the ‚ÄúLink Google Account‚Äù button to:

html
Copy
Edit
<a href="/authorize/{{ user['id'] }}" class="btn btn-sm btn-primary">Link Google Account</a>
Once you complete this chunk:

‚úÖ Your app will be fully wired for per-user Gmail account linking
üß† The user ID passed in the URL keeps it tied to the correct entry
üîê Tokens are securely stored in user_tokens.json